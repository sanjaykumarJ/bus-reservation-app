{"ast":null,"code":"var _jsxFileName = \"/Users/sanjaybalajawahar/Desktop/bus-reservation-app/src-frontend/src/components/bus-list-grid.tsx\";\nimport React from 'react';\nimport ReactDataGrid from \"react-data-grid\";\nimport { columnData } from \"./grid-utils\";\nexport class BusListGrid extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: props.records ? props.records : []\n    };\n  }\n\n  sortByField(records, sortColumn, sortDirection) {\n    if (sortDirection === \"ASC\") {\n      records.sort((a, b) => {\n        return a[sortColumn] > b[sortColumn] ? 1 : -1;\n      });\n    } else if (sortDirection === \"DESC\") {\n      records.sort((a, b) => {\n        return a[sortColumn] < b[sortColumn] ? 1 : -1;\n      });\n    }\n\n    return records;\n  }\n\n  createButtonColumn(columns) {\n    const buttonCellFormatter = {\n      key: \"button\",\n      name: \"book\",\n      formatter: /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => alert('Booking dialog will open'),\n        value: \"Book\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 24\n        }\n      })\n    };\n    return columns = {\n      buttonCellFormatter,\n      ...columns\n    }; //return columns{buttonCellFormatter,...columns}\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ReactDataGrid, {\n      columns: this.createButtonColumn(columnData),\n      rowGetter: i => this.state.records[i],\n      rowsCount: this.state.records ? this.state.records.length : 0,\n      minHeight: 500,\n      onGridSort: (sortColumn, sortDirection) => this.setState({\n        records: this.sortByField(this.state.records, sortColumn, sortDirection)\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/sanjaybalajawahar/Desktop/bus-reservation-app/src-frontend/src/components/bus-list-grid.tsx"],"names":["React","ReactDataGrid","columnData","BusListGrid","Component","constructor","props","state","records","sortByField","sortColumn","sortDirection","sort","a","b","createButtonColumn","columns","buttonCellFormatter","key","name","formatter","alert","render","i","length","setState"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,cAA3B;AAkBA,OAAO,MAAMC,WAAN,SAA0BH,KAAK,CAACI,SAAhC,CAAuD;AAC1DC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAEF,KAAK,CAACE,OAAN,GAAgBF,KAAK,CAACE,OAAtB,GAAgC;AADhC,KAAb;AAGH;;AAEDC,EAAAA,WAAW,CAACD,OAAD,EAAoBE,UAApB,EAAwCC,aAAxC,EAAyE;AAChF,QAAIA,aAAa,KAAK,KAAtB,EAA6B;AACzBH,MAAAA,OAAO,CAACI,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAE,eAAOD,CAAC,CAACH,UAAD,CAAD,GAAgBI,CAAC,CAACJ,UAAD,CAAjB,GAAgC,CAAhC,GAAoC,CAAC,CAA5C;AAA+C,OAAxE;AACH,KAFD,MAEO,IAAIC,aAAa,KAAK,MAAtB,EAA8B;AACjCH,MAAAA,OAAO,CAACI,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAE,eAAOD,CAAC,CAACH,UAAD,CAAD,GAAgBI,CAAC,CAACJ,UAAD,CAAjB,GAAgC,CAAhC,GAAoC,CAAC,CAA5C;AAA+C,OAAxE;AACH;;AACD,WAAOF,OAAP;AACH;;AAEDO,EAAAA,kBAAkB,CAACC,OAAD,EAAU;AACxB,UAAMC,mBAAmB,GAAG;AACxBC,MAAAA,GAAG,EAAE,QADmB;AAExBC,MAAAA,IAAI,EAAE,MAFkB;AAGxBC,MAAAA,SAAS,eAAE;AAAQ,QAAA,OAAO,EAAE,MAAMC,KAAK,CAAC,0BAAD,CAA5B;AAA0D,QAAA,KAAK,EAAC,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHa,KAA5B;AAKR,WAAOL,OAAO,GAAE;AAACC,MAAAA,mBAAD;AAAqB,SAAGD;AAAxB,KAAhB,CANgC,CAOxB;AACH;;AAEDM,EAAAA,MAAM,GAAG;AACL,wBAAQ,oBAAC,aAAD;AACJ,MAAA,OAAO,EAAE,KAAKP,kBAAL,CAAwBb,UAAxB,CADL;AAEJ,MAAA,SAAS,EAAEqB,CAAC,IAAI,KAAKhB,KAAL,CAAWC,OAAX,CAAmBe,CAAnB,CAFZ;AAGJ,MAAA,SAAS,EAAE,KAAKhB,KAAL,CAAWC,OAAX,GAAqB,KAAKD,KAAL,CAAWC,OAAX,CAAmBgB,MAAxC,GAAiD,CAHxD;AAIJ,MAAA,SAAS,EAAE,GAJP;AAKJ,MAAA,UAAU,EAAE,CAACd,UAAD,EAAaC,aAAb,KACR,KAAKc,QAAL,CAAc;AAAEjB,QAAAA,OAAO,EAAE,KAAKC,WAAL,CAAiB,KAAKF,KAAL,CAAWC,OAA5B,EAAqCE,UAArC,EAAiDC,aAAjD;AAAX,OAAd,CANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AASH;;AArCyD","sourcesContent":["import React from 'react';\nimport ReactDataGrid from \"react-data-grid\";\nimport { columnData } from \"./grid-utils\";\n\nexport interface Record {\n    id: Number,\n    operatorName: string;\n    departureLoc: string;\n    arrivalLoc: string;\n    departureTime: string;\n    arrivalTime: string;\n    duration: number;\n    busType: string;\n}\ninterface Props {\n    records: Record[];\n}\ninterface state {\n    records: Record[];\n}\nexport class BusListGrid extends React.Component<Props, state>{\n    constructor(props) {\n        super(props)\n        this.state = {\n            records: props.records ? props.records : []\n        }\n    }\n\n    sortByField(records: Record[], sortColumn: string, sortDirection: string): Record[] {\n        if (sortDirection === \"ASC\") {\n            records.sort((a, b) => { return a[sortColumn] > b[sortColumn] ? 1 : -1 })\n        } else if (sortDirection === \"DESC\") {\n            records.sort((a, b) => { return a[sortColumn] < b[sortColumn] ? 1 : -1 })\n        }\n        return records;\n    }\n\n    createButtonColumn(columns) {\n        const buttonCellFormatter = {\n            key: \"button\",\n            name: \"book\",\n            formatter: <button onClick={() => alert('Booking dialog will open')} value=\"Book\"></button>\n        }\nreturn columns= {buttonCellFormatter,...columns}\n        //return columns{buttonCellFormatter,...columns}\n    }\n\n    render() {\n        return (<ReactDataGrid\n            columns={this.createButtonColumn(columnData)}\n            rowGetter={i => this.state.records[i]}\n            rowsCount={this.state.records ? this.state.records.length : 0}\n            minHeight={500}\n            onGridSort={(sortColumn, sortDirection) =>\n                this.setState({ records: this.sortByField(this.state.records, sortColumn, sortDirection) })\n            }\n        />)\n    }\n}"]},"metadata":{},"sourceType":"module"}