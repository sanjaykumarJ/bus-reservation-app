{"version":3,"sources":["components/grid-utils.ts","components/bus-list-grid.tsx","components/search-form.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultColumnProperties","sortable","width","columnData","key","name","sortDescendingFirst","map","c","BusListGrid","props","state","records","sortColumn","sortDirection","sort","a","b","columns","buttonCellFormatter","formatter","onClick","alert","value","push","createButtonColumn","rowGetter","i","rowsCount","this","length","minHeight","onGridSort","setState","sortByField","React","Component","require","baseURL","SearchForm","departureCity","arrivalCity","startDate","Date","endDate","handleDepartureCityChange","bind","handleArrivalCityChange","handleStartDateChange","handleEndDateChange","handleSearch","event","target","date","Axios","get","params","response","console","log","data","message","window","className","aria-required","required","type","onChange","selected","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c7e83abd.chunk.js","sourcesContent":["export const defaultColumnProperties = {\n    sortable: true,\n    width: 120\n};\n\nexport const columnData = [\n    {\n        key: \"id\",\n        name: \"Bus Number\",\n        sortDescendingFirst: true\n    },\n    {\n        key: \"operatorName\",\n        name: \"Operator Name\"\n    },\n    {\n        key: \"departureLoc\",\n        name: \"Departure Location\"\n    },\n    {\n        key: \"arrivalLoc\",\n        name: \"Arrival location\"\n    },\n    {\n        key: \"departureTime\",\n        name: \"Departure Time\"\n    },\n    {\n        key: \"arrivalTime\",\n        name: \"Arrival Time\"\n    },\n    {\n        key: \"duration\",\n        name: \"Duration\"\n    },\n    {\n        key: \"busType\",\n        name: \"Bus Type\"\n    },\n].map(c => ({ ...c, ...defaultColumnProperties }));\n","import React from 'react';\nimport ReactDataGrid from \"react-data-grid\";\nimport { columnData } from \"./grid-utils\";\n\nexport interface Record {\n    id: Number,\n    operatorName: string;\n    departureLoc: string;\n    arrivalLoc: string;\n    departureTime: string;\n    arrivalTime: string;\n    duration: number;\n    busType: string;\n}\ninterface Props {\n    records: Record[];\n}\ninterface state {\n    records: Record[];\n}\nexport class BusListGrid extends React.Component<Props, state>{\n    constructor(props) {\n        super(props)\n        this.state = {\n            records: props.records ? props.records : []\n        }\n    }\n\n    sortByField(records: Record[], sortColumn: string, sortDirection: string): Record[] {\n        if (sortDirection === \"ASC\") {\n            records.sort((a, b) => { return a[sortColumn] > b[sortColumn] ? 1 : -1 })\n        } else if (sortDirection === \"DESC\") {\n            records.sort((a, b) => { return a[sortColumn] < b[sortColumn] ? 1 : -1 })\n        }\n        return records;\n    }\n\n    createButtonColumn(columns) {\n        const buttonCellFormatter = {\n            key: \"button\",\n            name: \"book\",\n            formatter: <button onClick={() => alert('Booking dialog will open')} value=\"Book\"></button>\n        }\n        columns.push(buttonCellFormatter);\n        return columns;\n    }\n\n    render() {\n        return (<ReactDataGrid\n            columns={createButtonColumn(columnData)}\n            rowGetter={i => this.state.records[i]}\n            rowsCount={this.state.records ? this.state.records.length : 0}\n            minHeight={500}\n            onGridSort={(sortColumn, sortDirection) =>\n                this.setState({ records: this.sortByField(this.state.records, sortColumn, sortDirection) })\n            }\n        />)\n    }\n}","import React from 'react';\nimport ReactDatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Axios from 'axios';\nimport { BusListGrid, Record } from './bus-list-grid';\n\nlet axiosDefaults = require('axios/lib/defaults');\naxiosDefaults.baseURL = 'http://localhost:8080/';\n\ninterface SearchFormState {\n  value: string;\n  departureCity: string;\n  arrivalCity: string;\n  startDate: Date;\n  endDate: Date;\n  records: Record[]\n}\nexport class SearchForm extends React.Component<any, SearchFormState> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      value: '',\n      departureCity: '',\n      arrivalCity: '',\n      startDate: new Date(),\n      endDate: new Date(),\n      records: []\n    };\n\n    // this.handleChange = this.handleChange.bind(this);\n    // this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleDepartureCityChange = this.handleDepartureCityChange.bind(this);\n    this.handleArrivalCityChange = this.handleArrivalCityChange.bind(this);\n    this.handleStartDateChange = this.handleStartDateChange.bind(this);\n    this.handleEndDateChange = this.handleEndDateChange.bind(this);\n    this.handleSearch = this.handleSearch.bind(this);\n  }\n\n  handleDepartureCityChange(event: any) {\n    this.setState({ departureCity: event.target.value });\n  }\n\n  handleArrivalCityChange(event: any) {\n    this.setState({ arrivalCity: event.target.value });\n  }\n\n  handleStartDateChange(date: any) {\n    this.setState({ startDate: date })\n  }\n\n  handleEndDateChange(date: any) {\n    this.setState({ endDate: date })\n  }\n\n  async handleSearch(event: any) {\n    if (this.state.departureCity && this.state.arrivalCity) {\n      try {\n        let response = await Axios.get('/querybuses', { params: { departureCity: this.state.departureCity, arrivalCity: this.state.arrivalCity } })\n        console.log(response);\n        this.setState({ records: response.data })\n      } catch (e) {\n        console.log(e.message);\n      }\n    } else {\n      window.alert('Enter valid values in the required fields')\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='flex-box'>\n          <label aria-required={true}>\n            {<p className='required-ash'>*</p>}Departure city:\n            <input required type=\"text\" value={this.state.departureCity} onChange={this.handleDepartureCityChange} />\n          </label>\n          <label>\n            {<p className='required-ash'>*</p>}Arrival city:\n            <input required type=\"text\" value={this.state.arrivalCity} onChange={this.handleArrivalCityChange} />\n          </label>\n          <label>\n            {<p className='required-ash'>*</p>}Departure date:\n            <ReactDatePicker required selected={this.state.startDate}\n              onChange={this.handleStartDateChange} />\n          </label>\n          <label>\n            Arrival date:\n            <ReactDatePicker selected={this.state.endDate}\n              onChange={this.handleEndDateChange} />\n          </label>\n          <input type=\"button\" onClick={this.handleSearch} value='Search Bus' />\n        </div>\n        {this.state.records.length > 0 && <BusListGrid records={this.state.records} />}\n\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport { SearchForm } from './components/search-form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Agent Bus booking</h1>\n      <SearchForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}